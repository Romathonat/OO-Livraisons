Plusieurs erreurs mineures de conception ont été détectées durant l'implémentation du modèle.
Des méthodes manquaient pour modifier des attributs privés.
Certaines méthodes prenaient en charge trop de fonctionnalités, il a fallu les scinder en plusieurs parties. Une partie au sein de la même classe en visibilité privée, et une partie dans d'autres classes concernées, en visibilité package ou bien publique.
Le comportement de certaines méthodes a dû être revu pour faciliter l'implémentation. C'est notamment le cas de la méthode ajouterTroncon de la classe Chemin, qui ajoute un troncon à la fin du chemin. Cette dernière est devenue ajouterTronconDebut, pour ajouter le troncon non pas à la fin, mais au début du chemin. En effet, cette méthode est uniquement utilisée lors de la construction du chemin à l'issue de l'algorithme de Dijkstra. Cette reconstruction se fait à l'envers. On part de l'intersection de d'arrivée, et on remonte dans l'arbre des plus courts chemins, vers l'intersection de départ. Dans ce contexte il parait naturel de modifier l'ajout de troncon comme expliqué ci-dessus.
Nous avons dû ajouter des classes pour l'implémentation du modèle. C'est par exemple le cas des classes : DepartArriveeChemin, DistanceIntersection et DistanceIntersectionComparator. Ces classes permettent d'agréger deux données dans le but de faire un tri. Les concepteurs du langage Java ont pris le parti de ne pas implémenter d'objet représentant une paire. Nous avons donc du implémenter des paires spécifiques à nos besoins. Par exemple DistanceIntersection représente une intersection et sa distance vers un point de départ. Elle est utile pour prendre place dans la file de priorité de l'algorithme de Dijkstra. DistanceIntersectionComparator permet de comparer deux DistanceIntersection. Celle des deux ayant la plus petite distance est remontée en priorité dans la file.
Enfin, certains attributs et méthodes ont été ajoutés pour optimiser les performances ou bien simplifier la vue. C'est par exemple le cas des attributs xMax et yMax de la classe Plan. Ceux-ci sont utiles dans la vue, pour connaitre les dimensions maximales de la zone visible sans parcourir toutes les intersections inutilement.
